// basic structure of C Program
// ------------------------------
/* comment lines */

// HEADER FILES
// MACROS DEFINITION
// FUNCTION PROTOTYPE
// GLOBAL VARIABLE DECLRARTION
// int main(){
//     |
//     |
//     |
//     LOCAL VAIABLE DECLARATION
//     INPUT/OUTPUT STATEMENTS
//     |
//     |
//     return 0;
// }


// build process

// 1. create a new file with .c as extension 
// 2. write your code 
// 3. save it
// 4. compile 
//     compiler --> .c  to  .o(object file)
//               high level  to  machine level
//     linking  -->  .o to .exe 
// 5. run the code .exe
// 6. get the output on the console



// Data Types 
// ------------------

// numbers----------- int | long int
// decimals---------- float | double | long double
// character--------- char 
// string ----------- char 
// true false ------- _Bool 

-------------------------------------
8bits  ==  1Byte
1KB    ==  1024Bytes
1MB    ==  1024Kilo Bytes
1GB    ==  1024Mega Bytes
1TB    ==  1024Giga Bytes 
-------------------------------------

--------------------------------------------------------------
| Data Type   |    keyword    |  format specifier  |  size   |
--------------------------------------------------------------
|  numeric    |   short int   |         %d         |  2Bytes |
|  numeric    |   int         |         %d         |  4Bytes |    
|  numeric    |   long int    |         %ld        |  4Bytes |  
|  real       |   float       |         %f         |  4Bytes |  
|  real       |   double      |         %lf        |  8Bytes |  
|  real       |   long double |         %Lf        |  10Bytes|   
|  characters |   char        |         %c         |  1Byte  |   
|  character  |   char[]      |         %s         |  1Byte  |   
--------------------------------------------------------------

------------------------------
Escape Sequences
-----------------------------
\n ----> new line 
\d ----> tab space
\a ----> alarm sound
\r ----> cursor returns to the top position

-----------------------------
input and output
----------------------------
input --- sacnf()  to read values form user console
output --- printf()  to print values to user console


-------------------------------
OPERATORS
-------------------------------
1. Arthematic Operators 
    +
    -
    *
    /
    %
2. Relational Operators
    >    <
    >=   <=
    ==
    !=
3. Logical Operators
    &&  Logical AND
    ||  Logical OR 
    !   Logical NOT

            AND   output = x.y 
            ------------------
            x    y     output
            ------------------
            0    0      0
            0    1      0
            1    0      0
            1    1      1

            OR   output = x+y 
            ------------------
            x    y     output
            ------------------
            0    0      0
            0    1      1
            1    0      1
            1    1      1

            NOT   output = !input
            ----------------------
            input   output
            ---------------------
            0           1
            1           0
4. Assignment Operator
    =  
5. Ternary Operators
    (condition) ? true : false

6. 'sizeof' Operator
7. Unary Operator
    ++
    -- 
8. Bitwise Operators 
    &   Bitwise AND
    |   Bitwise  OR


a=2   b=5;
010    101 
0 1 0
1 0 1
------
0 0 0   --- 0  => 2 & 5


---------------------------------------
CONDITIONAL STATEMENTS
---------------------------------------

(a) if ( condition )
        do this ;

(b) if ( condition ){
        do this ;
        and this ;
    }

(c) if ( condition )
        do this ;
    else
        do this ;

(d) if ( condition ){
        do this ;
        and this ;
    }
    else{
        do this ;
        and this ;
    }

(e) if ( condition ){
        if ( condition )
            do this ;
        else{
            do this ;
            and this ;
        }
    }
    else
        do this ;

(f) if ( condition )
        do this ;
    else{
        if ( condition )
            do this ;
        else{
            do this ;
            and this ;
        }
    }

(g) if ( condition )
        do this ;
    else if ( condition )
            do this ;
        else{
            do this ;
            and this ;
        }
    }



Type Conversion 
------------------------
A type cast is basically a conversion from one type to another. 
There are two types of type conversion:

    bool -> char -> short int -> int -> 
       unsigned int -> long -> unsigned -> 
       long long -> float -> double -> long double


1. Implicit Type Conversion
    - Done by the compiler on its own, without any external trigger from the user.
    - Generally takes place when in an expression more than one data type is present. 
        In such condition type conversion (type promotion) takes place to avoid loss of data.
    - All the data types of the variables are upgraded to the data type of the variable with largest data type.

2. Explicit Type Conversion
    - This process is also called type casting and it is user defined. 
    - Here the user can type cast the result to make it of a particular data type.
    syntax:
        (type) expression

Recursion
-----------------------------
A function is called a 'recursive' if a statement within the body 
of the funciton calls the same funciton. Also known as 'circular function'

Arrays
-------------------------------
An array is datatype which can store a collection of data 
of similar datatype
OR
An array is used to store similar datatypes

/* diffrent ways to initialise an array */
    1. data_type variable[size];
    2. data_type variable[size] = {n, n, n, n, n};
    2. data_type variable[] = {n, n, n, n, n, n,......};


Array elements in memory
---------------------------

int arr[8]; ---> total size is 32bytes
1-integer takes 4Bytes  
total =  8 * 4 = 32bytes

2D array == 1D array stacked upon each other


